# 1 "test_wifimockup.blk"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "test_wifimockup.blk"
-- BPSK
fun comp modulate_bpsk() {
  repeat {
      (x : bit) <- take;
      emit complex16{re=-1; im=0}
  }
}

-- IFFT



fun comp ifft() {
  repeat seq {
    (s:arr[64] complex16) <- takes 64;
    var fftdata : arr[128 +32] complex16;
    emits fftdata;
  }
}

-- CRC24
fun comp crc24 (len : int32, garbage : bool) {
  var crc_state: arr[4] bit := {'0,'0,'0,'0};

  times len seq {
    (x:arr[8] bit) <- takes 8;
    emits x;
  };
  emits crc_state;
  emits {'0,'0,'0,'0};

  let len_so_far = (len+1) * 8 in
  let len_mod = if len_so_far % 24 > 0 then 1 else 0 in
  let final_len = ((len_so_far / 24) + len_mod) * 24 in
  times (final_len - len_so_far) emits {'0,'0,'0,'0,'0,'0,'0,'0};

  return crc_state;
}

-- MAP OFDM
fun comp map_ofdm() {
 repeat seq {
    x <- takes 48;

    var pilots : arr[4] complex16;

    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};

    emits x[0:4];
    emit pilots[2];
    emits x[5:17];
    emit pilots[3];
    emits x[18:23];

    emit complex16{re=0; im=0};

    emits x[24:29];
    emit pilots[0];
    emits x[30:42];
    emit pilots[1];
    emits x[43:47];

    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
    emit complex16{re=0; im=0};
 }
}

-- ENCODE 12
fun comp encode12() {
  var s:arr[6] bit := {'0, '0, '0, '0, '0, '0};

  fun enc_state_machine(b:bit) {
    var r:arr[2] bit;
    r[0] := b ^ s[1] ^ s[2] ^ s[4] ^ s[5];
    r[1] := b ^ s[0] ^ s[1] ^ s[2] ^ s[5];

    s[1:5] := s[0:4];
    s[0] := b;
    return r
  }

  repeat <= [8,16] seq {
    dvm1 <- take;
    emits (enc_state_machine(dvm1))
  }
}


-- transmitter top-level pipeline --

fun comp tx_driver(len : int32) {
  crc24(len, true) >>>
  -- scrambler(default_scrmbl_st) >>>
  encode12() >>>
  -- interleaver_bpsk() >>>
  modulate_bpsk()
}

fun comp transmitter() {
  var len : int32;
  tx_driver(len) >>> map_ofdm() >>> ifft()
}



-- -- MAIN -------------------------------------------------------------------------

fun comp amp(c:int16) {
  repeat seq {
    (x:complex16) <-take;
    emit x
  }
}

fun comp convert_to_bits() {
  var ab : arr[8] bit;
  repeat {
    (x : int8)<-take;
    emits ab;
  }
}

let comp main = read >>> convert_to_bits() >>> transmitter() >>> amp(10) >>> write
