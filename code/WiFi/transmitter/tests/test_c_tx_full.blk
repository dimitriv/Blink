-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

-- Test created using Annex G, IEEE Standard_802.11a-1999


-- See createPreamble.blk for explanation
#define SHORT_FFT


#include <bits.blk>
#include "../transmitter.blk"


let h = HeaderInfo{coding=CR_34; modulation=M_16QAM; len=100};

fun comp scale() {
  repeat {
    (x:complex16)<-take;
    emit complex16{re=x.re/bpsk_mod_11a; im=x.im/bpsk_mod_11a};
  }
}

fun comp convert_to_bits() {
var ai : arr[1] int8;
var ab : arr[8] bit;

  repeat {
    x<-take;
    do{
      ai[0] := x;
      int8_to_bits(ab, ai);
    }
    emits ab;
  }
}


-- Note, we don't implement the filter from 802.11a-1999 but we modify 
-- the data to match the one without the filter (only each 80th sample changes)
let comp main = read[int8] >>> convert_to_bits() >>> transmitter() >>> write

