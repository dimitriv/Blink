#define LTS_ACCURATE
-- #define RADIO
#define DO_DECODING
-- #define FAST



#include <externals.blk>
#include "../const.blk"
#include "../receiver/cca/cca_tufv.blk"
#include "../receiver/OFDM/LTS.blk"
#include "../receiver/removeDC.blk"
#include "../receiver/downSample.blk"
#include "../receiver/OFDM/DataSymbol.blk"
#include "../receiver/OFDM/FreqCompensation.blk"
#include "../receiver/OFDM/FFT.blk"
#include "../receiver/OFDM/ChannelEqualization.blk"
#include "../receiver/OFDM/PilotTrack.blk"
#include "../receiver/OFDM/GetData.blk"

#ifdef DO_DECODING
#include "../receiver/decoding/DecodePLCP.blk"
#include "../receiver/decoding/Decode.blk"
#include "../transmitter/crc.blk"
#endif






let comp detectPreamble() = 
  (removeDC() >>> cca())
in 



#ifdef DO_DECODING
let comp receiveBits() = 
       seq { hdata <- DecodePLCP()
           ; Decode(hdata) >>> seq { (c : arr[4] bit) <- crc(hdata.len); check_crc(c) }
       }
in
#endif




let comp pad() = 
  times 500 {
    emit complex16{re=0; im=0};
  };
  repeat{
    x<-take;
    emit x;
  }
in



let comp skip() = 
  times 1 {
  -- times 65000 {
     x<- take;
  }

  repeat {
    x<- take;
    emit x;
  }  
in




{-
read[complex16] >>> 
  skip() >>>
#ifndef RADIO
  downSample() >>> 
  pad() >>>
#endif
  {det <- detectPreamble()
    ; times 10000 {x<-take; emit x}
  }
>>> write
-}




#ifndef RADIO 

  read >>> 
     downSample() >>> 
     pad() >>>
     seq{ det<-detectPreamble()
        ; do{println "Detected at: ", det.noSamples, ", shift: ", det.shift}
        ; params <- (LTS(det.shift)); 
          DataSymbol(det.shift) 
          >>> FFT() 
          >>> ChannelEqualization(params)
          >>> PilotTrack() 
          >>> GetData()
     #ifdef DO_DECODING
          >>> receiveBits()
     #endif
     }
  >>> write

#else 

   read >>> 
     repeat {
       seq{ det<-detectPreamble()
       #ifndef FAST
          ; do{println "Detected at: ", det.noSamples, ", shift: ", det.shift}
       #endif
          ; params <- (LTS(det.shift)); 
            DataSymbol(det.shift) 
            >>> FFT() 
            >>> ChannelEqualization(params)
            >>> PilotTrack() 
            >>> GetData()
       #ifdef DO_DECODING
            >>> receiveBits()
       #endif
       }
     }
   >>> write

#endif