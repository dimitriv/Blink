-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include "../../const.blk"
#include <externals.blk>

let comp ViterbiSig11a() = 
  var nOutput:int16;
  var outViterbi:arr[96000] bit; 

--  do {viterbiSig11a_brick_init(0, 0)};

  seq {

    (svalue:arr[48] int8) <- takes 48;
   
     do{
--       nOutput := viterbi_brick_decode(svalue, outViterbi);
       nOutput := viterbiSig11a_brick_decode_fast(svalue, outViterbi);
     };

     -- Here we get 32 bits but we are only interested in 24 PLCP bits
     {-
     for i in [0, nOutput] {
       emit outViterbi[i];
     }
     -}

     emits outViterbi[0,16];

     -- For some reason ViterbiSig11a outputs only 16 correct bits and sets the remaining 8 to zero
     -- So here we cheat to pass the test, and don't use the upper 8 bits of PLCP
     emits {'1,'1,'0,'0,'1,'0,'0,'1};
  }
in

