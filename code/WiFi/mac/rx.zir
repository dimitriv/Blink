-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#pragma once 

#include <externals.blk>
#include "../receiver/cca/cca_tufv.blk"
#include "../receiver/OFDM/LTS.blk"
#include "../receiver/removeDC.blk"
#include "../receiver/downSample.blk"
#include "../receiver/OFDM/DataSymbol.blk"
#include "../receiver/OFDM/FreqCompensation.blk"
#include "../receiver/OFDM/FFT.blk"
#include "../receiver/OFDM/ChannelEqualization.blk"
#include "../receiver/OFDM/PilotTrack.blk"
#include "../receiver/OFDM/GetData.blk"
#include "../receiver/decoding/DecodePLCP.blk"
#include "../receiver/decoding/Decode.blk"
#include "../transmitter/crc.blk"


fun comp detectPreamble(energy_threshold : int32) { 
  (removeDC() >>> cca(energy_threshold))
} 

{-
fun comp receiveBits() {
       seq { hdata <- DecodePLCP()
           ; Decode(hdata) >>> 
             seq { (c : arr[32] bit) <- crc(hdata.len-4, false); check_crc(c) } >>>
             repeat{
               x<-takes 8;
               if (not hdata.err) then {
                  emits x;
               }
             }
       }
}
-}


fun comp processCRC(hdata : struct HeaderInfo) {
var retCRC: arr[8] bit; 
var retMod: arr[8] bit; 
var retEnc: arr[8] bit; 
var retSize: arr[16] bit; 
var tmp: arr[2] int8;

  (c : arr[32] bit) <- crc(hdata.len-4, false); 
  crc <- check_crc(c);

  -- The following sends packet data to MAC
  do {
     -- CRC
     if (crc) then {
        tmp[0] := 1;
     } else {
        tmp[0] := 0;
     }
     int8_to_bits(retCRC, tmp[0,1]);

     -- Modulation
     tmp[0] := int8(hdata.modulation);
     int8_to_bits(retMod, tmp[0,1]);

     -- Coding
     tmp[0] := int8(hdata.coding);
     int8_to_bits(retEnc, tmp[0,1]);

     -- Size
     tmp[0] := int8(hdata.len % 256);
     tmp[1] := int8(hdata.len / 256);
     int8_to_bits(retSize, tmp[0,2]);
  } 
  emits retCRC;
  emits retMod;
  emits retEnc;
  emits retSize;
} 

fun comp receiveBits() {
       seq { hdata <- DecodePLCP()
           ; Decode(hdata) >>> processCRC(hdata)
           }
} 

fun comp receiver() {
  seq{ det<-detectPreamble(1000)
#ifndef FAST
     ; do{let normMaxCorr = if (det.energy == 0) then 0 else det.maxCorr / det.energy;
          println "Detected at: ", det.noSamples, ", shift: ", det.shift, 
                  ", energy: ", det.energy, ", noise: ", det.noise, 
                  ", maxCorr: ", det.maxCorr, ", normMaxCorr: ", normMaxCorr}
#endif
     ; params <- (LTS(det.shift, det.maxCorr))
     ; DataSymbol(det.shift) 
       >>> FFT() 
       >>> ChannelEqualization(params)
       >>> PilotTrack()
       >>> GetData() 
       >>> receiveBits()
  }
}


fun comp bufferup()
{
   repeat {
	(x : arr[512] complex16) <- takes 512;
	emits x;
   }
}

let comp main = read[complex16] >>> bufferup() >>> 
  seq {
    receiver();
    do{println ""; println "";}
  } 
  >>> write


