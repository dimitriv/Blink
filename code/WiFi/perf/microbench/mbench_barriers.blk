-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--

#include <externals.blk>
#define N
#define M

fun comp A(n : int) {
	var cnt : int;
	repeat {
		x <- takes 64;
		do {cnt := 1;}
		do {
			while (cnt < n) {
				sora_fft(x);
				cnt := cnt + 1;
			}
		}
		emits sora_fft(x);
	}
}

fun comp B(n : int) {
	var cnt : int;
	repeat {
		x <- takes 64;
		do {
			while (cnt < n) {
				sora_fft(x);
				cnt := cnt + 1;
			}
		}
		emits sora_fft(x);
	}
}

fun comp D(m : int) {
	var cnt : int;
	x <- takes 64
	do {
		while (cnt < m) {
			sora_fft(x);
			cnt := cnt + 1;
		}
	}
	emits sora_fft(x);
}

fun comp run () {
	var cnt : int := 0;
	repeat {
		if (cnt % 2 == 0) then
			(A(N) |>>>| D(M))
		else
			(B(N) |>>>| D(M))
		do {cnt := cnt + 1;}
	}
}

let comp main = read >>> run() >>> write

