#define LTS_ACCURATE
#define DO_DECODING


#include <externals.blk>
#include "../const.blk"
#include "../receiver/cca/cca_tufv.blk"
--#include "../receiver/cca/cca.blk"
#include "../receiver/OFDM/LTS.blk"
#include "../receiver/removeDC.blk"
#include "../receiver/downSample.blk"
#include "../receiver/OFDM/DataSymbol.blk"
#include "../receiver/OFDM/FreqCompensation.blk"
#include "../receiver/OFDM/FFT.blk"
#include "../receiver/OFDM/ChannelEqualization.blk"
#include "../receiver/OFDM/PilotTrack.blk"
#include "../receiver/OFDM/GetData.blk"

#ifdef DO_DECODING
#include "../receiver/decoding/DecodePLCP.blk"
#include "../receiver/decoding/Decode.blk"
#include "../transmitter/crc.blk"
#endif



let comp dummy() = 
--  times 490000 { 
--  times 580000 { 
--  times 670000 { 
  times 770000 { 
    x<- take;
  }

--  times 20000 {
  repeat {
    x<- take;
    emit x;
  }  
in

-- Start at 593


let comp detectPreamble() = 
  (removeDC() >>> cca())
in 

let comp agc() = 
  var output : arr[4] complex16;
  repeat{
    (x : arr[4] complex16) <- takes 4;
    do{v_shift_left_complex16(output, x, 2)};
    emits output;
  }
in 



#ifdef DO_DECODING
let comp receiveBits() = 
       seq { hdata <- DecodePLCP()
           ; Decode(hdata) >>> seq { (c : arr[4] bit) <- crc(hdata.len); check_crc(c) }
       }
in
#endif


let comp GetDataTest() = 
repeat {
  (x : arr[64] complex16) <- takes 64;

  emits x[38,6];
  emits x[44,14];
  emits x[58,6];

  emits x[1,7];
  emits x[8,14];
  emits x[22,5];
}
in


read >>> 
  dummy() >>> 
  downSample() >>> 
  seq{ det<-detectPreamble()
#ifndef FAST
     ; do{println "Detected at: ", det.noSamples}
#endif
--     times 10000 { x<-take; emit x}
     ;   params <- (LTS(det.shift)); --emits params.channelCoeffs;
       agc() >>> 
       DataSymbol(det.shift) >>> FFT() 
       >>> ChannelEqualization(params)
       >>> PilotTrack() 
--       >>> GetDataTest()
       >>> GetData()
#ifdef DO_DECODING
       >>> receiveBits()
#endif

  }
>>> write
