#include <externals.blk>
#include "../receiver/cca/cca_tufv.blk"
--#include "../receiver/cca/cca.blk"
#include "../receiver/OFDM/LTS.blk"
#include "../receiver/removeDC.blk"
#include "../receiver/downSample.blk"
#include "../receiver/OFDM/DataSymbol.blk"
#include "../receiver/OFDM/FreqCompensation.blk"
#include "../receiver/OFDM/FFT.blk"
#include "../receiver/OFDM/ChannelEqualization.blk"
#include "../receiver/OFDM/PilotTrack.blk"
#include "../receiver/OFDM/GetData.blk"
{-
#include "../receiver/decoding/DecodePLCP.blk"
#include "../receiver/decoding/Decode.blk"
#include "../transmitter/crc.blk"
-}

let comp dummy() = 
  times 17500 { 
    x<- take;
  }

  -- times 400 {
  repeat {
    x<- take;
    emit x;
  }  
in

-- Start at 593


let comp detectPreamble() = 
  (removeDC() >>> cca())
in 

let comp agc() = 
  var output : arr[4] complex16;
  repeat{
    (x : arr[4] complex16) <- takes 4;
    do{v_shift_left_complex16(output, x, 4)};
    emits output;
  }
in 


read >>> 
  dummy() >>> 
  downSample() >>> 
--  agc() >>> 
  seq{ t<-detectPreamble()
#ifndef FAST
     ; do{println "Detected at: ", t}
#endif
     times 10000 { x<-take; emit x}
     --; (xp:arr[10] complex16) <- takes 10
     --; params <- LTS(); -- emits params.channelCoeffs; 
     --; (xp:arr[71] complex16) <- takes 71;
     --; (xp:arr[61] complex16) <- takes 61;
     --; (xp:arr[141] complex16) <- takes 141;
     --  DataSymbol() >>> FFT() 
     --  >>> ChannelEqualization(params) >>> PilotTrack() >>> GetData()
  }
>>> write
