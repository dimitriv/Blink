-- 
-- Copyright (c) Microsoft Corporation
-- All rights reserved. 
--
-- Licensed under the Apache License, Version 2.0 (the ""License""); you
-- may not use this file except in compliance with the License. You may
-- obtain a copy of the License at
--
-- http://www.apache.org/licenses/LICENSE-2.0
--
-- THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR
-- CONDITIONS OF ANY KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT
-- LIMITATION ANY IMPLIED WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR
-- A PARTICULAR PURPOSE, MERCHANTABLITY OR NON-INFRINGEMENT.
--
-- See the Apache Version 2.0 License for specific language governing
-- permissions and limitations under the License.
--
--
#include <externals.blk> 
#include <v_correlate.blk>
#include <abs.blk>
#include "modulating.blk"


let czero = complex16{re=0; im=0} in 


let comp test_ifft() =
   var symbol:arr[64] complex16;
   var fftdata:arr[64] complex16;

   do{zero_complex16(fftdata)};

   repeat{
     (s:arr[64] complex16) <- takes 64;
     do {sora_ifft(64, s,fftdata[0,64])};

     do {v_shift_right_complex16(fftdata, fftdata, 2)};
     
     emits fftdata;
   }
  
in


let GeneratePreambleFreq(VAL : int16) =
   var preamble : arr[64] complex16;

   zero_complex16(preamble);
   preamble[4]  := complex16{re=-VAL; im=-VAL};
   preamble[8]  := complex16{re=VAL; im=VAL};
   preamble[12] := complex16{re=VAL; im=VAL};
   preamble[16] := complex16{re=VAL; im=VAL};
   preamble[20] := complex16{re=VAL; im=VAL};
   preamble[24] := complex16{re=VAL; im=VAL};

   preamble[64-24] := complex16{re=VAL; im=VAL};
   preamble[64-20] := complex16{re=-VAL; im=-VAL};
   preamble[64-16] := complex16{re=VAL; im=VAL};
   preamble[64-12] := complex16{re=-VAL; im=-VAL};
   preamble[64-8]  := complex16{re=-VAL; im=-VAL};
   preamble[64-4]  := complex16{re=VAL; im=VAL};

   return preamble;
in



let GeneratePreambleTime(VAL : int16) =
   var preamble : arr[64] complex16;

   preamble := GeneratePreambleFreq(VAL);
   sora_ifft(64, preamble, preamble);

   return preamble;
in



let InitCorrPattern() = 
   var pattern : arr[16*16] complex16;
   var preamble : arr[64] complex16;

   preamble := GeneratePreambleTime(1000);

   -- cyclic shift - stores all possible preamble shifts of length 16 in the pattern
   for i in [0,16] {
     pattern[i*16, 16] := preamble[i,16];
   }

   return pattern;
in





let comp Correlate() = 
   var pattern : arr[16*16] complex16;
   var corr : int32;
   var corr16 : int16;
   var maxCorr : int16;
   var maxInd : int32;   
   var input : arr[16] complex16;
   var corr_hist : arr[4*16] int32;

   do {
      pattern := InitCorrPattern();
      zero_int32(corr_hist);
   }

   repeat{
     x <- takes 16;

     do {
       v_shift_right_complex16(input, x, 4);

       maxCorr := 0;
       for i in [0, 16] {
          let corrc = v_correlate(pattern[i*16,16], input) in
          let corri = (abs_int32(corrc.re) + abs_int32(corrc.im)) in 
          corr_hist[i*4+1,3] := corr_hist[i*4,3];
          corr_hist[i*4] := corri;

          corr :=0;
          for j in [0,4] {
            corr := corr + corr_hist[i*4+j];
          }

          corr16 := int16(corr >> 4);

          --print pattern[i*16,4], ", ", input[0,4], ", ";
          --println corrc, ", ", corri, ", ", corr, ", ", corr16;

          if (corr16 > maxCorr) then {
             maxCorr := corr16;
             maxInd := i;
          }
       }
       --println "--->",  corr16;
     }
     emit maxCorr;
   }
in



-- Slide 88, preamble in frequency
--read[bit] >>> do{ dbgplot_complex_line(GeneratePreambleFreq(10000), 1) } >>> write[bit]
-- Slide 88, preamble in time
--read[bit] >>> do{ dbgplot_complex_line(GeneratePreambleTime(10000), 1) } >>> write[bit]


-- Slide 89, signal with preamble
{-
read[bit] >>> modulate_qpsk() >>> test_ifft() >>>
  (repeat { times 64 {x<-take; emit x}; emits GeneratePreambleTime(10000); times 64 {x<-take; emit x} }) >>>
  {x<-takes 192; do{ dbgplot_complex_line(x, 1) }} >>> write[bit]
-}


-- Slide 89, correlation
{-
read[bit] >>> modulate_qpsk() >>> test_ifft() >>>
  { times 64 {x<-take; emit x}; emits GeneratePreambleTime(10000); repeat {x<-take; emit x} } >>>
  Correlate() >>>  
  {x<-takes 12; do{ println x; dbgplot_real_line(x) }} >>> write[bit]
-}





