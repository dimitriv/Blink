-- An implementation of salsa20 core.  See
-- http://cr.yp.to/salsa20.html or http://cr.yp.to/snuffle/spec.pdf
-- for details.

-- To run:
-- ../../scripts/preprocesscompile-gcc.sh salsa20.zir salsa20.out
-- ./salsa20.out --input=dummy

fun rot32(x : uint32, c : int) = 
  (x << c) | ((x & 0xffffffffu) >> (32 - c))

fun quarterround(var a : arr[4] uint32) =
  begin
    a[ 1] := a[ 1] ^ rot32(a[ 0] + a[ 3], 7);
    a[ 2] := a[ 2] ^ rot32(a[ 1] + a[ 0], 9);
    a[ 3] := a[ 3] ^ rot32(a[ 2] + a[ 1],13);
    a[ 0] := a[ 0] ^ rot32(a[ 3] + a[ 2],18)
  end

-- 'rowround' and 'colround' would really benefit from generalized (i.e.,
-- noncontiguous) array views.
fun rowround(var a : arr[16] uint32) =
  var t : arr[4] uint32 in
  begin
    quarterround(a[0:3]);
    t[0:2]:=a[5:7];   t[3]:=a[4];       quarterround(t); a[5:7]:=t[0:2]; a[4]:=t[3];
    t[0:1]:=a[10:11]; t[2:3]:=a[8:9];   quarterround(t); a[10:11]:=t[0:1]; a[8:9]:=t[2:3];
    t[0]:=a[15];      t[1:3]:=a[12:14]; quarterround(t); a[15]:=t[0]; a[12:14]:=t[1:3]
  end

fun colround(var a : arr[16] uint32) =
  var t : arr[4] uint32 in
  begin
    t[ 0]:=a[ 0]; t[ 1]:=a[ 4]; t[ 2]:=a[ 8]; t[ 3]:=a[12]; quarterround(t);
    a[ 0]:=t[ 0]; a[ 4]:=t[ 1]; a[ 8]:=t[ 2]; a[12]:=t[ 3];

    t[ 0]:=a[ 5]; t[ 1]:=a[ 9]; t[ 2]:=a[13]; t[ 3]:=a[ 1]; quarterround(t);
    a[ 5]:=t[ 0]; a[ 9]:=t[ 1]; a[13]:=t[ 2]; a[ 1]:=t[ 3];

    t[ 0]:=a[10]; t[ 1]:=a[14]; t[ 2]:=a[ 2]; t[ 3]:=a[ 6]; quarterround(t);
    a[10]:=t[ 0]; a[14]:=t[ 1]; a[ 2]:=t[ 2]; a[ 6]:=t[ 3];

    t[ 0]:=a[15]; t[ 1]:=a[ 3]; t[ 2]:=a[ 7]; t[ 3]:=a[11]; quarterround(t);
    a[15]:=t[ 0]; a[ 3]:=t[ 1]; a[ 7]:=t[ 2]; a[11]:=t[ 3]
  end

fun doubleround(var a : arr[16] uint32) =
  begin
    colround(a);
    rowround(a)
  end

fun comp littleendian() =
  repeat do
    (x : arr[4] uint8) <- takes(4);
    emit(uint32(x[0]) + 256u*uint32(x[1]) + 65536u*uint32(x[2]) + 16777216u*uint32(x[3]))
  done

fun comp unlittleendian() =
  repeat do
    (x : uint32) <- take;
    _ <- emit(uint8( 255u        & x)); 
    _ <- emit(uint8((65535u      & x) >> 8));
    _ <- emit(uint8((16777215u   & x) >> 16));
         emit(uint8(               x  >> 24))
  done

fun comp salsa20_core() =
  var t : arr[16] uint32 in
  var u : arr[16] uint32 in
  repeat do
    (x : arr[16] uint32) <- takes(16);
    _ <- do begin t := x; u := x;
                  for i in [0,10] do doubleround(t) done;
                  for i in [0,16] do u[i] := u[i] + t[i] done
            end
         done;
    emits(u)
  done

fun comp test_rot32() =
  repeat do 
    (x : uint32) <- take;
    (c : uint32) <- take;
    emit(rot32(x,int(c)))
  done

fun comp test_quarterround() =
  var t : arr[4] uint32 in
  repeat do 
    x <- takes(4);
    _ <- do begin t := x; quarterround(t)
            end
         done;
    emits(t)
  done

fun comp test_rowround() =
  var t : arr[16] uint32 in
  repeat do 
    x <- takes(16);
    _ <- do begin t := x; rowround(t)
            end
         done;
    emits(t)
  done

fun comp test_colround() =
  var t : arr[16] uint32 in
  repeat do 
    x <- takes(16);
    _ <- do begin t := x; colround(t)
            end
         done;
    emits(t)
  done

fun comp test_doubleround() =
  var t : arr[16] uint32 in
  repeat do 
    x <- takes(16);
    _ <- do begin t := x; doubleround(t)
            end
         done;
    emits(t)
  done

fun comp salsa20() = littleendian() >>> salsa20_core() >>> unlittleendian()

let comp main = read[uint8] >>> salsa20() >>> write[uint8]

-- UNROLLED:
fun salsa20_unrolled(x : arr[16] uint32) =
  var a : arr[16] uint32 := x in
  begin 
    -- Execute 10 double rounds, or 20 rounds total:
    for i in [0,9] do
      begin 
        a[ 4] := a[ 4] ^ rot32(a[ 0] + a[12], 7); a[ 8] := a[ 8] ^ rot32(a[ 4] + a[ 0], 9);
        a[12] := a[12] ^ rot32(a[ 8] + a[ 4],13); a[ 0] := a[ 0] ^ rot32(a[12] + a[ 8],18);
        a[ 9] := a[ 9] ^ rot32(a[ 5] + a[ 1], 7); a[13] := a[13] ^ rot32(a[ 9] + a[ 5], 9);
        a[ 1] := a[ 1] ^ rot32(a[13] + a[ 9],13); a[ 5] := a[ 5] ^ rot32(a[ 1] + a[13],18);
        a[14] := a[14] ^ rot32(a[10] + a[ 6], 7); a[ 2] := a[ 2] ^ rot32(a[14] + a[10], 9);
        a[ 6] := a[ 6] ^ rot32(a[ 2] + a[14],13); a[10] := a[10] ^ rot32(a[ 6] + a[ 2],18);
        a[ 3] := a[ 3] ^ rot32(a[15] + a[11], 7); a[ 7] := a[ 7] ^ rot32(a[ 3] + a[15], 9);
        a[11] := a[11] ^ rot32(a[ 7] + a[ 3],13); a[15] := a[15] ^ rot32(a[11] + a[ 7],18);
        a[ 1] := a[ 1] ^ rot32(a[ 0] + a[ 3], 7); a[ 2] := a[ 2] ^ rot32(a[ 1] + a[ 0], 9);
        a[ 3] := a[ 3] ^ rot32(a[ 2] + a[ 1],13); a[ 0] := a[ 0] ^ rot32(a[ 3] + a[ 2],18);
        a[ 6] := a[ 6] ^ rot32(a[ 5] + a[ 4], 7); a[ 7] := a[ 7] ^ rot32(a[ 6] + a[ 5], 9);
        a[ 4] := a[ 4] ^ rot32(a[ 7] + a[ 6],13); a[ 5] := a[ 5] ^ rot32(a[ 4] + a[ 7],18);
        a[11] := a[11] ^ rot32(a[10] + a[ 9], 7); a[ 8] := a[ 8] ^ rot32(a[11] + a[10], 9);
        a[ 9] := a[ 9] ^ rot32(a[ 8] + a[11],13); a[10] := a[10] ^ rot32(a[ 9] + a[ 8],18);
        a[12] := a[12] ^ rot32(a[15] + a[14], 7); a[13] := a[13] ^ rot32(a[12] + a[15], 9);
        a[14] := a[14] ^ rot32(a[13] + a[12],13); a[15] := a[15] ^ rot32(a[14] + a[13],18)
      end
    done;
    a                                              
  end
