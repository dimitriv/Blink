List of features that we hope to add to Ziria at some point:

- More graceful automatic type casting. For example, x_int32 + x_int16 should automatically result 
  into y_int32 and not error.

- Support constant expressions wherever a literal is expected (e.g. var x:arr[const] int 
  and a[0,const] := b[0,const] and x<-takes const).

- Correct file and line number reporting on errors consistently through Ziria. 
  For example, bounds checking only reports line number from the expanged file.
  Type checking seems to also report a line number from the expanded file. 

- Array sizes are dynamically bound in function input but not in function output. 
  It seems that we cannot declare a function that return an array of unspecified size. 

- Implement static initialization of a complex array with a constant array.

- This is actually a bug. The following: 
      int8_to_bits(x[24+i*8,8], arr_cnt[0,1]);
  will create a subarray bitarrresXX using bitArrRead, call the external function on it
  but never really write it back to x!

- Fix the bug in typeinfer.wpl test in backend

- Fix the bug in stateinit.wpl test in backend

- Fix the heap bug in struct3.wpl test in backend

- Add switch/case statement

- Statically evaluated code that will be evaluated from a separate high-level function call. 
  For example, we can call from an outer C code: { init(); while(1){ run() }};
  So that we can reenter the pipeline from C (MAC code) with minimum reinitialization cost.

- Restructure various calls from Ziria generated code to make the API more clear. 
  For example, wpl_global_init() initializes the heap using wpl_init_heap and generates LUTs.
  So if I want to run wpl_go() many times in a C loop, I need to do only one one global init
  but I need to run wpl_init_heap in each loop. This should be simplified and clarified.

- Better return of parameters between MAC(C) and PHY(Ziria). For example, if Ziria code is a
  computer that returns a struct, this struct should be returned by wpl_go.

